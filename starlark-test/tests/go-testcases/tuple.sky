# Tests of Skylark 'tuple'

# literal
assert_eq((), ())
assert_eq((1), 1)
assert_eq((1,), (1,))
assert_((1) != (1,))
assert_eq((1, 2), (1, 2))
assert_eq((1, 2, 3, 4, 5), (1, 2, 3, 4, 5))
assert_((1, 2, 3) != (1, 2, 4))

# truth
assert_((False,))
assert_((False, False))
assert_(not ())

# indexing, x[i]
assert_eq(("a", "b")[0], "a")
assert_eq(("a", "b")[1], "b")

# slicing, x[i:j]
assert_eq("abcd"[0:4:1], "abcd")
assert_eq("abcd"[::2], "ac")
assert_eq("abcd"[1::2], "bd")
assert_eq("abcd"[4:0:-1], "dcb")
banana = tuple("banana".split_codepoints())
assert_eq(banana[7::-2], tuple("aaa".split_codepoints()))
assert_eq(banana[6::-2], tuple("aaa".split_codepoints()))
assert_eq(banana[5::-2], tuple("aaa".split_codepoints()))
assert_eq(banana[4::-2], tuple("nnb".split_codepoints()))

# tuple
assert_eq(tuple(), ())
assert_eq(tuple("abc".split_codepoints()), ("a", "b", "c"))
assert_eq(tuple(["a", "b", "c"]), ("a", "b", "c"))
assert_eq(tuple([1]), (1,))
---
tuple(1)  ### type 'int' is not iterable
---

# tuple * int,  int * tuple
abc = tuple("abc".split_codepoints())
assert_eq(abc * 0, ())
assert_eq(abc * -1, ())
assert_eq(abc * 1, abc)
assert_eq(abc * 3, ("a", "b", "c", "a", "b", "c", "a", "b", "c"))
assert_eq(0 * abc, ())
assert_eq(-1 * abc, ())
assert_eq(1 * abc, abc)
assert_eq(3 * abc, ("a", "b", "c", "a", "b", "c", "a", "b", "c"))

# TODO(adonovan): test use of tuple as sequence
# (for loop, comprehension, library functions).
