# Tests of Skylark 'list'

# literals
assert_eq([], [])
assert_eq([1], [1])
assert_eq([1,], [1])
assert_eq([1, 2], [1, 2])
assert_([1, 2, 3] != [1, 2, 4])

# truth
assert_([0])
assert_(not [])

# indexing, x[i]
---
abc = list("abc".split_codepoints())
abc[-4]  ### out of bound
---
abc = list("abc".split_codepoints())
assert_eq(abc[-3], "a")
assert_eq(abc[-2], "b")
assert_eq(abc[-1], "c")
assert_eq(abc[0], "a")
assert_eq(abc[1], "b")
assert_eq(abc[2], "c")
---
abc = list("abc".split_codepoints())
abc[3]  ### out of bound
---
# x[i] = ...
x3 = [0, 1, 2]
x3[1] = 2
x3[2] += 3
assert_eq(x3, [0, 2, 5])
def f2(): x3[3] = 4
f2()  ### Out of bound
---

# list + list
assert_eq([1, 2, 3] + [3, 4, 5], [1, 2, 3, 3, 4, 5])
---
[1, 2] + (3, 4)  ### Type of parameters mismatch
---
(1, 2) + [3, 4]  ### Type of parameters mismatch
---

# list * int,  int * list
abc = list("abc".split_codepoints())
assert_eq(abc * 0, [])
assert_eq(abc * -1, [])
assert_eq(abc * 1, abc)
assert_eq(abc * 3, ["a", "b", "c", "a", "b", "c", "a", "b", "c"])
assert_eq(0 * abc, [])
assert_eq(-1 * abc, [])
assert_eq(1 * abc, abc)
assert_eq(3 * abc, ["a", "b", "c", "a", "b", "c", "a", "b", "c"])

# list comprehensions
assert_eq([2 * x for x in [1, 2, 3]], [2, 4, 6])
assert_eq([2 * x for x in [1, 2, 3] if x > 1], [4, 6])
assert_eq([(x, y) for x in [1, 2] for y in [3, 4]],
          [(1, 3), (1, 4), (2, 3), (2, 4)])
assert_eq([(x, y) for x in [1, 2] if x == 2 for y in [3, 4]],[(2, 3), (2, 4)])
assert_eq([2 * x for x in (1, 2, 3)], [2, 4, 6])
assert_eq([x for x in "abc".split_codepoints()], ["a", "b", "c"])
assert_eq([x for x in {"a": 1, "b": 2}], ["a", "b"])
assert_eq([(y, x) for x, y in {1: 2, 3: 4}.items()], [(2, 1), (4, 3)])
# corner cases of parsing:
assert_eq([x for x in range(12) if x%2 == 0 if x%3 == 0], [0, 6])

# list function
assert_eq(list(), [])
assert_eq(list("ab".split_codepoints()), ["a", "b"])

# A list comprehension defines a separate lexical block,
# whether at top-level...
a = [1, 2]
b = [a for a in [3, 4]]
assert_eq(a, [1, 2])
assert_eq(b, [3, 4])
# ...or local to a function.
def listcompblock():
  c = [1, 2]
  d = [c for c in [3, 4]]
  assert_eq(c, [1, 2])
  assert_eq(d, [3, 4])
listcompblock()

# list.pop
x4 = [1,2,3,4,5]
assert_eq(x4.pop(), 5)
assert_eq(x4, [1,2,3,4])
assert_eq(x4.pop(1), 2)
assert_eq(x4, [1,3,4])
assert_eq(x4.pop(0), 1)
assert_eq(x4, [3,4])

# TODO(adonovan): test uses of list as sequence
# (for loop, comprehension, library functions).

# x += y for lists is equivalent to x.extend(y).
# y may be a sequence.
# TODO: Test that side-effects of 'x' occur only once.
def list_extend():
  a = [1, 2, 3]
  b = a
  a = a + [4] # creates a new list
  assert_eq(a, [1, 2, 3, 4])
  assert_eq(b, [1, 2, 3]) # b is unchanged

  a = [1, 2, 3]
  b = a
  # += <=> a = a + [4], hence creating a new list. The go implem does it differently...
  a += [4] # create a new list
  assert_eq(a, [1, 2, 3, 4])
  assert_eq(b, [1, 2, 3]) # b is unchanged

  a = [1, 2, 3]
  b = a
  a.extend([4]) # updates existing list
  assert_eq(a, [1, 2, 3, 4])
  assert_eq(b, [1, 2, 3, 4]) # alias observes the change
list_extend()

---
# TODO: This is a weird behavior += will bind locally but read globally, is it unwanted?
# Unlike list.extend(iterable), list += iterable makes its LHS name local.
a_list = []
def f4():
  a_list += [1] # binding use => a_list is a local var
f4()  # # # Variable not found
---
# list += <not iterable>
def f5():
  x = []
  x += 1
f5()  ### Type of parameters mismatch
---

# append
x5 = [1, 2, 3]
x5.append(4)
x5.append("abc")
assert_eq(x5, [1, 2, 3, 4, "abc"])

# extend
x5a = [1, 2, 3]
x5a.extend("abc".split_codepoints()) # string
x5a.extend((True, False))       # tuple
assert_eq(x5a, [1, 2, 3, "a", "b", "c", True, False])

# list.insert
def insert_at(index):
  x = list(range(3))
  x.insert(index, 42)
  return x
assert_eq(insert_at(-99), [42, 0, 1, 2])
assert_eq(insert_at(-2), [0, 42, 1, 2])
assert_eq(insert_at(-1), [0, 1, 42, 2])
assert_eq(insert_at( 0), [42, 0, 1, 2])
assert_eq(insert_at( 1), [0, 42, 1, 2])
assert_eq(insert_at( 2), [0, 1, 42, 2])
assert_eq(insert_at( 3), [0, 1, 2, 42])
assert_eq(insert_at( 4), [0, 1, 2, 42])

# list.remove
---
def remove(v):
  x = [3, 1, 4, 1]
  x.remove(v)
  return x
assert_eq(remove(3), [1, 4, 1])
assert_eq(remove(1), [3, 4, 1])
assert_eq(remove(4), [3, 1, 1])
[3, 1, 4, 1].remove(42) ### Not found
---

# list.index
bananas = list("bananas".split_codepoints())
assert_eq(bananas.index('a'), 1) # bAnanas
bananas.index('d')  ### not found
---
bananas = list("bananas".split_codepoints())
# start
assert_eq(bananas.index('a', -1000), 1) # bAnanas
assert_eq(bananas.index('a', 0), 1)     # bAnanas
assert_eq(bananas.index('a', 1), 1)     # bAnanas
assert_eq(bananas.index('a', 2), 3)     # banAnas
assert_eq(bananas.index('a', 3), 3)     # banAnas
assert_eq(bananas.index('b', 0), 0)     # Bananas
assert_eq(bananas.index('n', -3), 4)    # banaNas
assert_eq(bananas.index('s', -2), 6)    # bananaS
# start, end
assert_eq(bananas.index('s', -1000, 7), 6) # bananaS
---
bananas = list("bananas".split_codepoints())
bananas.index('n', -2)  ### not found
---
bananas = list("bananas".split_codepoints())
bananas.index('b', 1)  ### not found
---
bananas = list("bananas".split_codepoints())
bananas.index('s', -1000, 6)  ### not found
---
bananas = list("bananas".split_codepoints())
bananas.index('d', -1000, 1000)  ### not found
---

# slicing, x[i:j:k]
bananas = list("bananas".split_codepoints())
assert_eq(bananas[6::-2], list("snnb".split_codepoints()))
assert_eq(bananas[5::-2], list("aaa".split_codepoints()))
assert_eq(bananas[4::-2], list("nnb".split_codepoints()))
assert_eq(bananas[99::-2], list("snnb".split_codepoints()))
assert_eq(bananas[100::-2], list("snnb".split_codepoints()))
# TODO(adonovan): many more tests
---
# iterator invalidation
def iterator1():
  list = [0, 1, 2]
  for x in list:
    list[x] = 2 * x
  return list
# Updating elements of a list while iterating is allowed in the go
# implementation but following the specification
# (https://github.com/bazelbuild/starlark/blob/815aed90b552fa70adca4dc18d73082fae83b538/design.md#no-mutation-during-iteration)
# a immutable list element like a number does not match the definition of
# "deep content" so it is disallowed in our implementation.
iterator1()   ### Cannot mutate an iterable while iterating
---
def iterator2():
  list = [0, 1, 2]
  for x in list:
    list.remove(x)
iterator2()   ### Cannot mutate an iterable while iterating
---
def iterator3():
  list = [0, 1, 2]
  for x in list:
    list.append(3)
iterator3()   ### Cannot mutate an iterable while iterating
---
def iterator4():
  list = [0, 1, 2]
  for x in list:
    list.extend([3, 4])
iterator4()   ### Cannot mutate an iterable while iterating
---
def fff(x):
  x.append(4)
def iterator5():
  list = [1, 2, 3]
  _ = [fff(list) for x in list]
iterator5()   ### Cannot mutate an iterable while iterating
