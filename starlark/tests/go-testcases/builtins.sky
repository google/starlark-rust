# Tests of Skylark built-in functions

# len
assert_eq(len([1, 2, 3]), 3)
assert_eq(len((1, 2, 3)), 3)
assert_eq(len({1: 2}), 1)
---
len(1)  ### len() not supported for type int
---

# and, or
assert_eq(123 or "foo", 123)
assert_eq(0 or "foo", "foo")
assert_eq(123 and "foo", "foo")
assert_eq(0 and "foo", 0)
none = None
_1 = none and none[0]      # rhs is not evaluated
_2 = (not none) or none[0] # rhs is not evaluated

# any, all
assert_(all([]))
assert_(all([1, True, "foo"]))
assert_(not all([1, True, ""]))
assert_(not any([]))
assert_(any([0, False, "foo"]))
assert_(not any([0, False, ""]))

# in
assert_(3 in [1, 2, 3])
assert_(4 not in [1, 2, 3])
assert_(3 in (1, 2, 3))
assert_(4 not in (1, 2, 3))
---
3 in "foo"  ### Type of parameters mismatch
---
assert_(123 in {123: ""})
assert_(456 not in {123:""})
---
assert_([] not in {123: ""})  ### Not hashable
---

# sorted
assert_eq(sorted([42, 123, 3]), [3, 42, 123])
assert_eq(sorted([42, 123, 3], reverse=True), [123, 42, 3])
assert_eq(sorted(["wiz", "foo", "bar"]), ["bar", "foo", "wiz"])
assert_eq(sorted(["wiz", "foo", "bar"], reverse=True), ["wiz", "foo", "bar"])
assert_eq(sorted([1, 2, None, 3]), [1, 2, 3, None])
assert_eq(sorted([1, "one"]), [1, "one"])
# custom key function
assert_eq(sorted(["two", "three", "four"], key=len),
          ["two", "four", "three"])
assert_eq(sorted(["two", "three", "four"], key=len, reverse=True),
          ["three", "four", "two"])
---
# why should that fails?
# sorted([1, 2, 3], key=None)  # Type of parameters mismatch
---
# sort is stable
pairs = [(4, 0), (3, 1), (4, 2), (2, 3), (3, 4), (1, 5), (2, 6), (3, 7)]
def fn(x): return x[0]
assert_eq(sorted(pairs, key=fn),
          [(1, 5),
           (2, 3), (2, 6),
           (3, 1), (3, 4), (3, 7),
           (4, 0), (4, 2)])

# reversed
assert_eq(reversed([1, 144, 81, 16]), [16, 81, 144, 1])

# dict
assert_eq(dict([(1, 2), (3, 4)]), {1: 2, 3: 4})
assert_eq(dict([(1, 2), (3, 4)], foo="bar"), {1: 2, 3: 4, "foo": "bar"})
assert_eq(dict({1:2, 3:4}), {1: 2, 3: 4})
assert_eq(dict({1:2, 3:4}.items()), {1: 2, 3: 4})

# range
assert_eq("tuple", type(range(10)))
assert_eq("(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)", str(range(0, 10, 1)))
assert_eq("(1, 2, 3, 4, 5, 6, 7, 8, 9)", str(range(1, 10)))
assert_eq("()", str(range(0, 10, -1)))
---
assert_(bool(range(1, 2)))
assert_(not(range(2, 1))) # an empty range is false
assert_eq([x*x for x in range(5)], [0, 1, 4, 9, 16])
assert_eq(list(range(5)), [0, 1, 2, 3, 4])
assert_eq(list(range(-5)), [])
assert_eq(list(range(2, 5)), [2, 3, 4])
assert_eq(list(range(5, 2)), [])
assert_eq(list(range(-2, -5)), [])
assert_eq(list(range(-5, -2)), [-5, -4, -3])
assert_eq(list(range(2, 10, 3)), [2, 5, 8])
assert_eq(list(range(10, 2, -3)), [10, 7, 4])
assert_eq(list(range(-2, -10, -3)), [-2, -5, -8])
assert_eq(list(range(-10, -2, 3)), [-10, -7, -4])
assert_eq(list(range(10, 2, -1)), [10, 9, 8, 7, 6, 5, 4, 3])
---
# TODO
# range(3000000000)  # 3000000000 out of range # signed 32-bit values only
---
# Two ranges compare equal if they denote the same sequence:
assert_eq(range(0), range(2, 1, 3))       # []
assert_eq(range(0, 3, 2), range(0, 4, 2)) # [0, 2]
assert_(range(1, 10) != range(2, 10))
---
assert_(range(0) < range(1))
---
# <number> in <range>
assert_(1 in range(3))
---
assert_(True in range(3))  # The go implementation does not support that but python does.
---
assert_("one" not in range(10))
---
assert_(4 not in range(4))

# list
assert_eq(sorted(list({"a": 1, "b": 2})), ['a', 'b'])

# min, max
assert_eq(min(5, -2, 1, 7, 3), -2)
assert_eq(max(5, -2, 1, 7, 3), 7)
assert_eq(min([5, -2, 1, 7, 3]), -2)
assert_eq(min("one", "two", "three", "four"), "four")
assert_eq(max("one", "two", "three", "four"), "two")
---
min()  ### min() expect a non empty iterable
---
min(1)  ### not iterable
---
min([])  ### empty
---
def m1(x): return x*x
def m2(x): return -x
assert_eq(min(5, -2, 1, 7, 3, key=m1), 1) # min absolute value
assert_eq(min(5, -2, 1, 7, 3, key=m2), 7) # min negated value

# enumerate
assert_eq(enumerate([False, True, None], 42), [(42, False), (43, True), (44, None)])

# zip
assert_eq(zip(), [])
assert_eq(zip([]), [])
assert_eq(zip([1, 2, 3]), [(1,), (2,), (3,)])
z1 = [1]
assert_eq(zip(z1), [(1,)])
z1.append(2)
assert_eq(zip(z1), [(1,), (2,)])
zip(z1, 1) ### 'int' is not iterable
z1.append(3)

# dir for builtin_function_or_method
assert_eq(dir(None), [])
assert_eq(dir({})[:3], ["clear", "get", "items"]) # etc
assert_eq(dir(1), [])
assert_eq(dir([])[:3], ["append", "clear", "extend"]) # etc

# hasattr, getattr, dir
# hasfields is an application-defined type defined in eval_test.go.
## We would need to define that type to works, so ignore that test for now
## TODO: Add hasfields for those test
# hf = hasfields()
# assert_eq(dir(hf), [])
# assert_(not hasattr(hf, "x"))
# ---
# getattr(hf, "x")  # # # no .x field or method
# ---
# assert_eq(getattr(hf, "x", 42), 42)
# hf.x = 1
# assert_(hasattr(hf, "x"))
# assert_eq(getattr(hf, "x"), 1)
# assert_eq(hf.x, 1)
# hf.x = 2
# assert_eq(getattr(hf, "x"), 2)
# assert_eq(hf.x, 2)
# built-in types can have attributes (methods) too.
myset = dict()
assert_eq(dir(myset), ["union"])
assert_(hasattr(myset, "union"))
assert_(not hasattr(myset, "onion"))
assert_eq(str(getattr(myset, "union")), "<built-in method union of set value>")
---
myset = dict()
getattr(myset, "onion")  ### .onion not supported for type dict
---
myset = dict()
assert_eq(getattr(myset, "onion", 42), 42)

# repr
assert_eq(repr(1), "1")
assert_eq(repr("x"), '"x"')
assert_eq(repr(["x", 1]), '["x", 1]')
